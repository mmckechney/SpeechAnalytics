//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace SpeechAnalyticsLibrary.Models.SpeechToText.API
{
   using System = global::System;



   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class BaseModel : SharedModel
   {

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public BaseModelLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public BaseModelProperties Properties { get; set; }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static BaseModel FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<BaseModel>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class BaseModelDeprecationDates
   {
      /// <summary>
      /// The date when adaptation becomes deprecated.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("adaptationDateTime")]
      public System.DateTimeOffset? AdaptationDateTime { get; set; }

      /// <summary>
      /// The date when transcription becomes deprecated.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionDateTime")]
      public System.DateTimeOffset? TranscriptionDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static BaseModelDeprecationDates FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<BaseModelDeprecationDates>(data, options);

      }

   }

   /// <summary>
   /// Features supported by the model.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class BaseModelFeatures : SharedModelFeatures
   {
      /// <summary>
      /// Supported dataset kinds to adapt the model.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("supportsAdaptationsWith")]

      // TODO(system.text.json): Add string enum item converter
      public System.Collections.Generic.ICollection<DatasetKind> SupportsAdaptationsWith { get; set; }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static BaseModelFeatures FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<BaseModelFeatures>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class BaseModelLinks
   {
      /// <summary>
      /// The location to get a manifest for this model to be used in the on-prem container. See operation "Models_GetCustomModelManifest" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("manifest")]
      public System.Uri Manifest { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static BaseModelLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<BaseModelLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class BaseModelProperties
   {

      [System.Text.Json.Serialization.JsonPropertyName("deprecationDates")]
      public BaseModelDeprecationDates DeprecationDates { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("features")]
      public BaseModelFeatures Features { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static BaseModelProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<BaseModelProperties>(data, options);

      }

   }

   /// <summary>
   /// Type of data block.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum BlockKind
   {

      [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
      Committed = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Uncommitted")]
      Uncommitted = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Latest")]
      Latest = 2,

   }

   /// <summary>
   /// Entry of the commit block list.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CommitBlocksEntry
   {

      [System.Text.Json.Serialization.JsonPropertyName("kind")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public BlockKind? Kind { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("id")]
      public string Id { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CommitBlocksEntry FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CommitBlocksEntry>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Component
   {
      /// <summary>
      /// Additional messages about the current service health.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("message")]
      public string Message { get; set; }

      /// <summary>
      /// The name of the component.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("name")]
      public string Name { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public HealthStatus? Status { get; set; }

      /// <summary>
      /// The type of this component.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("type")]
      public string Type { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Component FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Component>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CustomModel : SharedModel
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public CustomModelLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public CustomModelProperties Properties { get; set; }

      /// <summary>
      /// The text used to adapt this language model.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("text")]
      public string Text { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("baseModel")]
      public EntityReference BaseModel { get; set; }

      /// <summary>
      /// Datasets used for adaptation.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("datasets")]
      public System.Collections.Generic.ICollection<EntityReference> Datasets { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CustomModel FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CustomModel>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CustomModelDeprecationDates
   {
      /// <summary>
      /// The date when transcription becomes deprecated.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionDateTime")]
      public System.DateTimeOffset? TranscriptionDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CustomModelDeprecationDates FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CustomModelDeprecationDates>(data, options);

      }

   }

   /// <summary>
   /// Features supported by the model.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CustomModelFeatures : SharedModelFeatures
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CustomModelFeatures FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CustomModelFeatures>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CustomModelLinks
   {
      /// <summary>
      /// The location to the model copy action. See operation "Models_CopyTo" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("copyTo")]
      public System.Uri CopyTo { get; set; }

      /// <summary>
      /// The location to get all files of this entity. See operation "Models_ListFiles" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("files")]
      public System.Uri Files { get; set; }

      /// <summary>
      /// The location to get a manifest for this model to be used in the on-prem container. See operation "Models_GetCustomModelManifest" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("manifest")]
      public System.Uri Manifest { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CustomModelLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CustomModelLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CustomModelProperties
   {
      /// <summary>
      /// The weight of custom model between 1 (1% custom model and 99% base model) and 100 (100% custom model and 0% base model).
      /// <br/>When this property is not set, the service chooses a suitable value (get the model to retrieve the selected weight).
      /// <br/>Start without using this property. If needed, choose a larger (or smaller) weight to increase (or decrease) the impact of the custom model.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customModelWeightPercent")]
      [System.ComponentModel.DataAnnotations.Range(1, 100)]
      public int? CustomModelWeightPercent { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("deprecationDates")]
      public CustomModelDeprecationDates DeprecationDates { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("features")]
      public CustomModelFeatures Features { get; set; }

      /// <summary>
      /// The email address to send email notifications to in case the operation completes.
      /// <br/>The value will be removed after successfully sending the email.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("email")]
      public string Email { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CustomModelProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CustomModelProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Dataset
   {

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public DatasetLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public DatasetProperties Properties { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("kind")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public DatasetKind Kind { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The URL of the data for the dataset.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentUrl")]
      public System.Uri ContentUrl { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      /// <summary>
      /// The locale of the contained data.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Dataset FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Dataset>(data, options);

      }

   }

   /// <summary>
   /// Type of data import.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum DatasetKind
   {

      [System.Runtime.Serialization.EnumMember(Value = @"Language")]
      Language = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Acoustic")]
      Acoustic = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Pronunciation")]
      Pronunciation = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"AudioFiles")]
      AudioFiles = 3,

      [System.Runtime.Serialization.EnumMember(Value = @"LanguageMarkdown")]
      LanguageMarkdown = 4,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DatasetLinks
   {
      /// <summary>
      /// The location to get all files of this entity. See operation "Datasets_ListFiles" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("files")]
      public System.Uri Files { get; set; }

      /// <summary>
      /// The location to commit the list of blocks when uploading a dataset using blocks. See operation "Datasets_CommitBlocks" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("commitBlocks")]
      public System.Uri CommitBlocks { get; set; }

      /// <summary>
      /// The location to list the already uploaded blocks of this entity when uploading a dataset using blocks. See operation "Datasets_GetDatasetBlocks" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("listBlocks")]
      public System.Uri ListBlocks { get; set; }

      /// <summary>
      /// The location to upload blocks to when uploading a dataset using blocks. See operation "Datasets_UploadBlock" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("uploadBlocks")]
      public System.Uri UploadBlocks { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DatasetLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DatasetLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DatasetLocales : System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.Collection<DatasetKind>>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DatasetLocales FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DatasetLocales>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DatasetProperties
   {
      /// <summary>
      /// The number of lines accepted for this data set.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("acceptedLineCount")]
      public int? AcceptedLineCount { get; set; }

      /// <summary>
      /// The number of lines rejected for this data set.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("rejectedLineCount")]
      public int? RejectedLineCount { get; set; }

      /// <summary>
      /// The total duration of the datasets if it contains audio files. The duration is encoded as ISO 8601 duration
      /// <br/>("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("duration")]
      public string Duration { get; set; }

      /// <summary>
      /// The email address to send email notifications to in case the operation completes.
      /// <br/>The value will be removed after successfully sending the email.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("email")]
      public string Email { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DatasetProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DatasetProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DatasetUpdate
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DatasetUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DatasetUpdate>(data, options);

      }

   }

   /// <summary>
   /// Detailed error code enum.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum DetailedErrorCode
   {

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidParameterValue")]
      InvalidParameterValue = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidRequestBodyFormat")]
      InvalidRequestBodyFormat = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"EmptyRequest")]
      EmptyRequest = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"MissingInputRecords")]
      MissingInputRecords = 3,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidDocument")]
      InvalidDocument = 4,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelVersionIncorrect")]
      ModelVersionIncorrect = 5,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidDocumentBatch")]
      InvalidDocumentBatch = 6,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedLanguageCode")]
      UnsupportedLanguageCode = 7,

      [System.Runtime.Serialization.EnumMember(Value = @"DataImportFailed")]
      DataImportFailed = 8,

      [System.Runtime.Serialization.EnumMember(Value = @"InUseViolation")]
      InUseViolation = 9,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidLocale")]
      InvalidLocale = 10,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidBaseModel")]
      InvalidBaseModel = 11,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidAdaptationMapping")]
      InvalidAdaptationMapping = 12,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidDataset")]
      InvalidDataset = 13,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidTest")]
      InvalidTest = 14,

      [System.Runtime.Serialization.EnumMember(Value = @"FailedDataset")]
      FailedDataset = 15,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidModel")]
      InvalidModel = 16,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidTranscription")]
      InvalidTranscription = 17,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidPayload")]
      InvalidPayload = 18,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidParameter")]
      InvalidParameter = 19,

      [System.Runtime.Serialization.EnumMember(Value = @"EndpointWithoutLogging")]
      EndpointWithoutLogging = 20,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidPermissions")]
      InvalidPermissions = 21,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidPrerequisite")]
      InvalidPrerequisite = 22,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidProductId")]
      InvalidProductId = 23,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidSubscription")]
      InvalidSubscription = 24,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidProject")]
      InvalidProject = 25,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidProjectKind")]
      InvalidProjectKind = 26,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidRecordingsUri")]
      InvalidRecordingsUri = 27,

      [System.Runtime.Serialization.EnumMember(Value = @"OnlyOneOfUrlsOrContainerOrDataset")]
      OnlyOneOfUrlsOrContainerOrDataset = 28,

      [System.Runtime.Serialization.EnumMember(Value = @"ExceededNumberOfRecordingsUris")]
      ExceededNumberOfRecordingsUris = 29,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelMismatch")]
      ModelMismatch = 30,

      [System.Runtime.Serialization.EnumMember(Value = @"ProjectGenderMismatch")]
      ProjectGenderMismatch = 31,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelDeprecated")]
      ModelDeprecated = 32,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelExists")]
      ModelExists = 33,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelNotDeployable")]
      ModelNotDeployable = 34,

      [System.Runtime.Serialization.EnumMember(Value = @"EndpointNotUpdatable")]
      EndpointNotUpdatable = 35,

      [System.Runtime.Serialization.EnumMember(Value = @"SingleDefaultEndpoint")]
      SingleDefaultEndpoint = 36,

      [System.Runtime.Serialization.EnumMember(Value = @"EndpointCannotBeDefault")]
      EndpointCannotBeDefault = 37,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidModelUri")]
      InvalidModelUri = 38,

      [System.Runtime.Serialization.EnumMember(Value = @"SubscriptionNotFound")]
      SubscriptionNotFound = 39,

      [System.Runtime.Serialization.EnumMember(Value = @"QuotaViolation")]
      QuotaViolation = 40,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedDelta")]
      UnsupportedDelta = 41,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedFilter")]
      UnsupportedFilter = 42,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedPagination")]
      UnsupportedPagination = 43,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedDynamicConfiguration")]
      UnsupportedDynamicConfiguration = 44,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedOrderBy")]
      UnsupportedOrderBy = 45,

      [System.Runtime.Serialization.EnumMember(Value = @"NoUtf8WithBom")]
      NoUtf8WithBom = 46,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelDeploymentNotCompleteState")]
      ModelDeploymentNotCompleteState = 47,

      [System.Runtime.Serialization.EnumMember(Value = @"SkuLimitsExist")]
      SkuLimitsExist = 48,

      [System.Runtime.Serialization.EnumMember(Value = @"DeployingFailedModel")]
      DeployingFailedModel = 49,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedTimeRange")]
      UnsupportedTimeRange = 50,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidLogDate")]
      InvalidLogDate = 51,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidLogId")]
      InvalidLogId = 52,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidLogStartTime")]
      InvalidLogStartTime = 53,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidLogEndTime")]
      InvalidLogEndTime = 54,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidTopForLogs")]
      InvalidTopForLogs = 55,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidSkipTokenForLogs")]
      InvalidSkipTokenForLogs = 56,

      [System.Runtime.Serialization.EnumMember(Value = @"DeleteNotAllowed")]
      DeleteNotAllowed = 57,

      [System.Runtime.Serialization.EnumMember(Value = @"Forbidden")]
      Forbidden = 58,

      [System.Runtime.Serialization.EnumMember(Value = @"DeployNotAllowed")]
      DeployNotAllowed = 59,

      [System.Runtime.Serialization.EnumMember(Value = @"UnexpectedError")]
      UnexpectedError = 60,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidCollection")]
      InvalidCollection = 61,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidCallbackUri")]
      InvalidCallbackUri = 62,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidSasValidityDuration")]
      InvalidSasValidityDuration = 63,

      [System.Runtime.Serialization.EnumMember(Value = @"InaccessibleCustomerStorage")]
      InaccessibleCustomerStorage = 64,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedClassBasedAdaptation")]
      UnsupportedClassBasedAdaptation = 65,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidWebHookEventKind")]
      InvalidWebHookEventKind = 66,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidTimeToLive")]
      InvalidTimeToLive = 67,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DiarizationProperties
   {

      [System.Text.Json.Serialization.JsonPropertyName("speakers")]
      [System.ComponentModel.DataAnnotations.Required]
      public DiarizationSpeakersProperties Speakers { get; set; } = new DiarizationSpeakersProperties();

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DiarizationProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DiarizationProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class DiarizationSpeakersProperties
   {
      /// <summary>
      /// A hint for the minimum number of speakers for diarization. Must be smaller than or equal to the maxSpeakers property.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("minCount")]
      [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
      public int? MinCount { get; set; }

      /// <summary>
      /// The maximum number of speakers for diarization. Must be less than 36 and larger than or equal to the minSpeakers property.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("maxCount")]
      [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
      public int? MaxCount { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static DiarizationSpeakersProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<DiarizationSpeakersProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Endpoint
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public EndpointLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public EndpointProperties Properties { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The text used to adapt a language model for this endpoint.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("text")]
      public string Text { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("model")]
      public EntityReference Model { get; set; }

      /// <summary>
      /// The locale of the contained data.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Endpoint FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Endpoint>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EndpointLinks
   {
      /// <summary>
      /// The REST endpoint for short requests up to 15 seconds.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("restInteractive")]
      public System.Uri RestInteractive { get; set; }

      /// <summary>
      /// The REST endpoint for requests up to 60 seconds.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("restConversation")]
      public System.Uri RestConversation { get; set; }

      /// <summary>
      /// The REST endpoint for requests up to 60 seconds, supporting dictation of punctuation marks.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("restDictation")]
      public System.Uri RestDictation { get; set; }

      /// <summary>
      /// The Speech SDK endpoint for short requests up to 15 seconds with a single final result.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("webSocketInteractive")]
      public System.Uri WebSocketInteractive { get; set; }

      /// <summary>
      /// The Speech SDK endpoint for long requests with multiple final results.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("webSocketConversation")]
      public System.Uri WebSocketConversation { get; set; }

      /// <summary>
      /// The Speech SDK endpoint for long requests with multiple final results, supporting dictation of
      /// <br/>punctuation marks.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("webSocketDictation")]
      public System.Uri WebSocketDictation { get; set; }

      /// <summary>
      /// The audio and transcription logs for this endpoint.  See operation "Endpoints_ListLogs" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("logs")]
      public System.Uri Logs { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EndpointLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EndpointLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EndpointProperties
   {
      /// <summary>
      /// A value indicating whether content logging (audio &amp; transcriptions) is being used for a deployment.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("loggingEnabled")]
      public bool? LoggingEnabled { get; set; }

      /// <summary>
      /// How long the endpoint will be kept in the system. Once the endpoint reaches the time to live
      /// <br/>after completion (successful or failed) it will be automatically deleted. Not setting this value or setting
      /// <br/>to 0 will disable automatic deletion. The longest supported duration is 31 days.
      /// <br/>The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("timeToLive")]
      public string TimeToLive { get; set; }

      /// <summary>
      /// The email address to send email notifications to in case the operation completes.
      /// <br/>The value will be removed after successfully sending the email.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("email")]
      public string Email { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EndpointProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EndpointProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EndpointPropertiesUpdate
   {
      /// <summary>
      /// A value indicating whether content logging (audio &amp; transcriptions)
      /// <br/>is being used for a deployment.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentLoggingEnabled")]
      public bool? ContentLoggingEnabled { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EndpointPropertiesUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EndpointPropertiesUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EndpointUpdate
   {

      [System.Text.Json.Serialization.JsonPropertyName("model")]
      public EntityReference Model { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public EndpointPropertiesUpdate Properties { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EndpointUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EndpointUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EntityError
   {
      /// <summary>
      /// The code of this error.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("code")]
      public string Code { get; set; }

      /// <summary>
      /// The message for this error.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("message")]
      public string Message { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EntityError FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EntityError>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EntityReference
   {
      /// <summary>
      /// The location of the referenced entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public System.Uri Self { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EntityReference FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EntityReference>(data, options);

      }

   }

   /// <summary>
   /// New format which conforms to the new Cognitive Services API guidelines which is available at https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
   /// <br/>This contains an outer error with error code, message, details, target and an inner error with more descriptive details.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Error
   {

      [System.Text.Json.Serialization.JsonPropertyName("code")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public ErrorCode? Code { get; set; }

      /// <summary>
      /// Additional supportive details regarding the error and/or expected policies.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("details")]
      public System.Collections.Generic.ICollection<Error> Details { get; set; }

      /// <summary>
      /// High level error message.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("message")]
      public string Message { get; set; }

      /// <summary>
      /// The source of the error.
      /// <br/>For example it would be "documents" or "document id" in case of invalid document.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("target")]
      public string Target { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("innerError")]
      public InnerError InnerError { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Error FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Error>(data, options);

      }

   }

   /// <summary>
   /// High level error codes.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum ErrorCode
   {

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidRequest")]
      InvalidRequest = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"InvalidArgument")]
      InvalidArgument = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"InternalServerError")]
      InternalServerError = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"ServiceUnavailable")]
      ServiceUnavailable = 3,

      [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
      NotFound = 4,

      [System.Runtime.Serialization.EnumMember(Value = @"PipelineError")]
      PipelineError = 5,

      [System.Runtime.Serialization.EnumMember(Value = @"Conflict")]
      Conflict = 6,

      [System.Runtime.Serialization.EnumMember(Value = @"InternalCommunicationFailed")]
      InternalCommunicationFailed = 7,

      [System.Runtime.Serialization.EnumMember(Value = @"Forbidden")]
      Forbidden = 8,

      [System.Runtime.Serialization.EnumMember(Value = @"NotAllowed")]
      NotAllowed = 9,

      [System.Runtime.Serialization.EnumMember(Value = @"Unauthorized")]
      Unauthorized = 10,

      [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedMediaType")]
      UnsupportedMediaType = 11,

      [System.Runtime.Serialization.EnumMember(Value = @"TooManyRequests")]
      TooManyRequests = 12,

      [System.Runtime.Serialization.EnumMember(Value = @"UnprocessableEntity")]
      UnprocessableEntity = 13,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Evaluation
   {

      [System.Text.Json.Serialization.JsonPropertyName("model1")]
      [System.ComponentModel.DataAnnotations.Required]
      public EntityReference Model1 { get; set; } = new EntityReference();

      [System.Text.Json.Serialization.JsonPropertyName("model2")]
      [System.ComponentModel.DataAnnotations.Required]
      public EntityReference Model2 { get; set; } = new EntityReference();

      [System.Text.Json.Serialization.JsonPropertyName("transcription1")]
      public EntityReference Transcription1 { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("transcription2")]
      public EntityReference Transcription2 { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("dataset")]
      [System.ComponentModel.DataAnnotations.Required]
      public EntityReference Dataset { get; set; } = new EntityReference();

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public EvaluationLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public EvaluationProperties Properties { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      /// <summary>
      /// The locale of the contained data.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Evaluation FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Evaluation>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EvaluationLinks
   {
      /// <summary>
      /// The location to get all files of this entity. See operation "Evaluations_ListFiles" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("files")]
      public System.Uri Files { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EvaluationLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EvaluationLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EvaluationProperties
   {
      /// <summary>
      /// The word error rate of recognition with model2.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordErrorRate2")]
      public double? WordErrorRate2 { get; set; }

      /// <summary>
      /// The word error rate of recognition with model1.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordErrorRate1")]
      public double? WordErrorRate1 { get; set; }

      /// <summary>
      /// The sentence error rate of recognition with model2.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("sentenceErrorRate2")]
      public double? SentenceErrorRate2 { get; set; }

      /// <summary>
      /// The number of processed sentences by model2.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("sentenceCount2")]
      public int? SentenceCount2 { get; set; }

      /// <summary>
      /// The number of processed words by model2.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordCount2")]
      public int? WordCount2 { get; set; }

      /// <summary>
      /// The number of correctly recognized words by model2.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("correctWordCount2")]
      public int? CorrectWordCount2 { get; set; }

      /// <summary>
      /// The number of recognized words by model2, that are substitutions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordSubstitutionCount2")]
      public int? WordSubstitutionCount2 { get; set; }

      /// <summary>
      /// The number of recognized words by model2, that are deletions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordDeletionCount2")]
      public int? WordDeletionCount2 { get; set; }

      /// <summary>
      /// The number of recognized words by model2, that are insertions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordInsertionCount2")]
      public int? WordInsertionCount2 { get; set; }

      /// <summary>
      /// The sentence error rate of recognition with model1.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("sentenceErrorRate1")]
      public double? SentenceErrorRate1 { get; set; }

      /// <summary>
      /// The number of processed sentences by model1.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("sentenceCount1")]
      public int? SentenceCount1 { get; set; }

      /// <summary>
      /// The number of processed words by model1.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordCount1")]
      public int? WordCount1 { get; set; }

      /// <summary>
      /// The number of correctly recognized words by model1.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("correctWordCount1")]
      public int? CorrectWordCount1 { get; set; }

      /// <summary>
      /// The number of recognized words by model1, that are substitutions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordSubstitutionCount1")]
      public int? WordSubstitutionCount1 { get; set; }

      /// <summary>
      /// The number of recognized words by model1, that are deletions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordDeletionCount1")]
      public int? WordDeletionCount1 { get; set; }

      /// <summary>
      /// The number of recognized words by model1, that are insertions.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordInsertionCount1")]
      public int? WordInsertionCount1 { get; set; }

      /// <summary>
      /// The email address to send email notifications to in case the operation completes.
      /// <br/>The value will be removed after successfully sending the email.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("email")]
      public string Email { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EvaluationProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EvaluationProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EvaluationUpdate
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EvaluationUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EvaluationUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class File
   {

      [System.Text.Json.Serialization.JsonPropertyName("kind")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public FileKind? Kind { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public FileLinks Links { get; set; }

      /// <summary>
      /// The creation time of this file.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>(see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public FileProperties Properties { get; set; }

      /// <summary>
      /// The name of this file.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("name")]
      public string Name { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static File FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<File>(data, options);

      }

   }

   /// <summary>
   /// Type of data.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum FileKind
   {

      [System.Runtime.Serialization.EnumMember(Value = @"DatasetReport")]
      DatasetReport = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Audio")]
      Audio = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"LanguageData")]
      LanguageData = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"PronunciationData")]
      PronunciationData = 3,

      [System.Runtime.Serialization.EnumMember(Value = @"AcousticDataArchive")]
      AcousticDataArchive = 4,

      [System.Runtime.Serialization.EnumMember(Value = @"AcousticDataTranscriptionV2")]
      AcousticDataTranscriptionV2 = 5,

      [System.Runtime.Serialization.EnumMember(Value = @"Transcription")]
      Transcription = 6,

      [System.Runtime.Serialization.EnumMember(Value = @"TranscriptionReport")]
      TranscriptionReport = 7,

      [System.Runtime.Serialization.EnumMember(Value = @"EvaluationDetails")]
      EvaluationDetails = 8,

      [System.Runtime.Serialization.EnumMember(Value = @"ModelReport")]
      ModelReport = 9,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class FileLinks
   {
      /// <summary>
      /// The url to retrieve the content of this file.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentUrl")]
      public System.Uri ContentUrl { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static FileLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<FileLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class FileProperties
   {
      /// <summary>
      /// The size of the data in bytes.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("size")]
      public long? Size { get; set; }

      /// <summary>
      /// The duration in case this file is an audio file. The duration is encoded as ISO 8601
      /// <br/>duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("duration")]
      public string Duration { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static FileProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<FileProperties>(data, options);

      }

   }

   /// <summary>
   /// Health status of the service.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum HealthStatus
   {

      [System.Runtime.Serialization.EnumMember(Value = @"Unhealthy")]
      Unhealthy = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Degraded")]
      Degraded = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Healthy")]
      Healthy = 2,

   }

   /// <summary>
   /// New Inner Error format which conforms to Cognitive Services API Guidelines which is available at https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
   /// <br/>This contains required properties ErrorCode, message and optional properties target, details(key value pair), inner error(this can be nested).
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class InnerError
   {

      [System.Text.Json.Serialization.JsonPropertyName("code")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public DetailedErrorCode? Code { get; set; }

      /// <summary>
      /// Additional supportive details regarding the error and/or expected policies.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("details")]
      public System.Collections.Generic.IDictionary<string, string> Details { get; set; }

      /// <summary>
      /// High level error message.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("message")]
      public string Message { get; set; }

      /// <summary>
      /// The source of the error.
      /// <br/>For example it would be "documents" or "document id" in case of invalid document.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("target")]
      public string Target { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("innerError")]
      public InnerError InnerError1 { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static InnerError FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<InnerError>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class LanguageIdentificationProperties
   {
      /// <summary>
      /// The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("candidateLocales")]
      [System.ComponentModel.DataAnnotations.Required]
      public System.Collections.Generic.ICollection<string> CandidateLocales { get; set; } = new System.Collections.ObjectModel.Collection<string>();

      /// <summary>
      /// An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.
      /// <br/>Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("speechModelMapping")]
      public System.Collections.Generic.IDictionary<string, EntityReference> SpeechModelMapping { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static LanguageIdentificationProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<LanguageIdentificationProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ModelCopy
   {
      /// <summary>
      /// The subscription key of the subscription that is the target of the copy operation.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("targetSubscriptionKey")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string TargetSubscriptionKey { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ModelCopy FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ModelCopy>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ModelFile
   {
      /// <summary>
      /// The name of this file.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("name")]
      public string Name { get; set; }

      /// <summary>
      /// The url to retrieve the content of this file.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentUrl")]
      public System.Uri ContentUrl { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ModelFile FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ModelFile>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ModelManifest
   {

      [System.Text.Json.Serialization.JsonPropertyName("model")]
      [System.ComponentModel.DataAnnotations.Required]
      public EntityReference Model { get; set; } = new EntityReference();

      /// <summary>
      /// The model files of this model.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("modelFiles")]
      [System.ComponentModel.DataAnnotations.Required]
      public System.Collections.Generic.ICollection<ModelFile> ModelFiles { get; set; } = new System.Collections.ObjectModel.Collection<ModelFile>();

      /// <summary>
      /// The configuration for running this model in a container.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      [System.ComponentModel.DataAnnotations.Required]
      public System.Collections.Generic.IDictionary<string, object> Properties { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ModelManifest FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ModelManifest>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ModelUpdate
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ModelUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ModelUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedBaseModels
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<BaseModel> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedBaseModels FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedBaseModels>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedCustomModels
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<CustomModel> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedCustomModels FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedCustomModels>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedDatasets
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<Dataset> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedDatasets FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedDatasets>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedEndpoints
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<Endpoint> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedEndpoints FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedEndpoints>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedEvaluations
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<Evaluation> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedEvaluations FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedEvaluations>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedFiles
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<File> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedFiles FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedFiles>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedProjects
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<Project> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedProjects FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedProjects>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedTranscriptions
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<Transcription> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedTranscriptions FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedTranscriptions>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class PaginatedWebHooks
   {
      /// <summary>
      /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
      /// <br/>            
      /// <br/>When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
      /// <br/>It's recommended to build a list on the client and delete after the fetching of the complete list.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("values")]
      public System.Collections.Generic.ICollection<WebHook> Values { get; set; }

      /// <summary>
      /// A link to the next set of paginated results if there are more entities available; otherwise null.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("@nextLink")]
      public System.Uri NextLink { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static PaginatedWebHooks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<PaginatedWebHooks>(data, options);

      }

   }

   /// <summary>
   /// Mode of profanity filtering.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum ProfanityFilterMode
   {

      [System.Runtime.Serialization.EnumMember(Value = @"None")]
      None = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Removed")]
      Removed = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Tags")]
      Tags = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"Masked")]
      Masked = 3,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Project
   {

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public ProjectLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public ProjectProperties Properties { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The locale of the contained data.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Project FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Project>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ProjectLinks
   {
      /// <summary>
      /// The location to get a list of all evaluations of this project. See operation "Projects_ListEvaluations" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("evaluations")]
      public System.Uri Evaluations { get; set; }

      /// <summary>
      /// The location to get a list of all datasets of this project. See operation "Projects_ListDatasets" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("datasets")]
      public System.Uri Datasets { get; set; }

      /// <summary>
      /// The location to get a list of all models of this project. See operation "Projects_ListModels" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("models")]
      public System.Uri Models { get; set; }

      /// <summary>
      /// The location to get a list of all endpoints of this project. See operation "Projects_ListEndpoints" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("endpoints")]
      public System.Uri Endpoints { get; set; }

      /// <summary>
      /// The location to get a list of all transcriptions of this project. See operation "Projects_ListTranscriptions" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("transcriptions")]
      public System.Uri Transcriptions { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ProjectLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ProjectLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ProjectProperties
   {
      /// <summary>
      /// The number of datasets associated to this project.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("datasetCount")]
      public int? DatasetCount { get; set; }

      /// <summary>
      /// The number of evaluations associated to this project.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("evaluationCount")]
      public int? EvaluationCount { get; set; }

      /// <summary>
      /// The number of models associated to this project.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("modelCount")]
      public int? ModelCount { get; set; }

      /// <summary>
      /// The number of transcriptions associated to this project.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionCount")]
      public int? TranscriptionCount { get; set; }

      /// <summary>
      /// The number of endpoints associated to this project.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("endpointCount")]
      public int? EndpointCount { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ProjectProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ProjectProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ProjectUpdate
   {
      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ProjectUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ProjectUpdate>(data, options);

      }

   }

   /// <summary>
   /// The mode used for punctuation.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum PunctuationMode
   {

      [System.Runtime.Serialization.EnumMember(Value = @"None")]
      None = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Dictated")]
      Dictated = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
      Automatic = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"DictatedAndAutomatic")]
      DictatedAndAutomatic = 3,

   }

   /// <summary>
   /// ResponseBlock.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ResponseBlock
   {

      [System.Text.Json.Serialization.JsonPropertyName("name")]
      public string Name { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("size")]
      public int? Size { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ResponseBlock FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ResponseBlock>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ServiceHealth
   {

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public HealthStatus? Status { get; set; }

      /// <summary>
      /// Additional messages about the current service health.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("message")]
      public string Message { get; set; }

      /// <summary>
      /// Optional subcomponents of this service and their status.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("components")]
      public System.Collections.Generic.ICollection<Component> Components { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ServiceHealth FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ServiceHealth>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class SharedModel
   {
      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The locale of the contained data.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static SharedModel FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<SharedModel>(data, options);

      }

   }

   /// <summary>
   /// Features supported by the model.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class SharedModelFeatures
   {
      /// <summary>
      /// A value indicating whether batch transcription is supported.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("supportsTranscriptions")]
      public bool? SupportsTranscriptions { get; set; }

      /// <summary>
      /// A value indicating whether creation of endpoints for live transcription is supported.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("supportsEndpoints")]
      public bool? SupportsEndpoints { get; set; }

      /// <summary>
      /// A value indicating whether this model can be used for transcription on speech container. This feature can be added on existing models when it becomes usable on speech container.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("supportsTranscriptionsOnSpeechContainers")]
      public bool? SupportsTranscriptionsOnSpeechContainers { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static SharedModelFeatures FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<SharedModelFeatures>(data, options);

      }

   }

   /// <summary>
   /// Describe the current state of the API
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public enum Status
   {

      [System.Runtime.Serialization.EnumMember(Value = @"NotStarted")]
      NotStarted = 0,

      [System.Runtime.Serialization.EnumMember(Value = @"Running")]
      Running = 1,

      [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
      Succeeded = 2,

      [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
      Failed = 3,

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Transcription
   {

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public TranscriptionLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public TranscriptionProperties Properties { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("model")]
      public EntityReference Model { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("dataset")]
      public EntityReference Dataset { get; set; }

      /// <summary>
      /// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
      /// <br/>This property will not be returned in a response.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentUrls")]
      public System.Collections.Generic.ICollection<System.Uri> ContentUrls { get; set; }

      /// <summary>
      /// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
      /// <br/>The maximum size for a blob is 2.5GB.
      /// <br/>Container SAS should contain 'r' (read) and 'l' (list) permissions.
      /// <br/>This property will not be returned in a response.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("contentContainerUrl")]
      public System.Uri ContentContainerUrl { get; set; }

      /// <summary>
      /// The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("locale")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string Locale { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Transcription FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Transcription>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class TranscriptionLinks
   {
      /// <summary>
      /// The location to get all files of this entity. See operation "Transcriptions_ListFiles" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("files")]
      public System.Uri Files { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static TranscriptionLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<TranscriptionLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class TranscriptionProperties
   {
      /// <summary>
      /// A value indicating whether diarization (speaker identification) is requested. The default value
      /// <br/>is `false`.
      /// <br/>If this field is set to true and the improved diarization system is configured by specifying
      /// <br/>`DiarizationProperties`, the improved diarization system will provide diarization for a configurable
      /// <br/>range of speakers.
      /// <br/>If this field is set to true and the improved diarization system is not enabled (not specifying
      /// <br/>`DiarizationProperties`), the basic diarization system will distinguish between up to two speakers.
      /// <br/>No extra charges are applied for the basic diarization.
      /// <br/>            
      /// <br/>The basic diarization system is deprecated and will be removed in the next major version of the API.
      /// <br/>This `diarizationEnabled` setting will also be removed.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("diarizationEnabled")]
      public bool? DiarizationEnabled { get; set; } = true;

      /// <summary>
      /// A value indicating whether word level timestamps are requested. The default value is
      /// <br/>`false`.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("wordLevelTimestampsEnabled")]
      public bool? WordLevelTimestampsEnabled { get; set; } = true;

      /// <summary>
      /// A value indicating whether word level timestamps for the display form are requested. The default value is `false`.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayFormWordLevelTimestampsEnabled")]
      public bool? DisplayFormWordLevelTimestampsEnabled { get; set; } = true;

      /// <summary>
      /// The duration of the transcription. The duration is encoded as ISO 8601 duration
      /// <br/>("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("duration")]
      public string Duration { get; set; }

      /// <summary>
      /// A collection of the requested channel numbers.
      /// <br/>In the default case, the channels 0 and 1 are considered.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("channels")]
      public System.Collections.Generic.ICollection<int> Channels { get; set; }

      /// <summary>
      /// The requested destination container.
      /// <br/>### Remarks ###
      /// <br/>When a destination container is used in combination with a `timeToLive`, the metadata of a
      /// <br/>transcription will be deleted normally, but the data stored in the destination container, including
      /// <br/>transcription results, will remain untouched, because no delete permissions are required for this
      /// <br/>container.&lt;br /&gt;
      /// <br/>To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)"
      /// <br/>instead of `destinationContainerUrl`, where blobs can be cleaned up.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("destinationContainerUrl")]
      public System.Uri DestinationContainerUrl { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("punctuationMode")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public PunctuationMode? PunctuationMode { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("profanityFilterMode")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public ProfanityFilterMode? ProfanityFilterMode { get; set; }

      /// <summary>
      /// How long the transcription will be kept in the system after it has completed. Once the
      /// <br/>transcription reaches the time to live after completion (successful or failed) it will be automatically
      /// <br/>deleted. Not setting this value or setting it to 0 will disable automatic deletion. The longest supported
      /// <br/>duration is 31 days.
      /// <br/>The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("timeToLive")]
      public string TimeToLive { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("diarization")]
      public DiarizationProperties Diarization { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("languageIdentification")]
      public LanguageIdentificationProperties LanguageIdentification { get; set; }

      /// <summary>
      /// The email address to send email notifications to in case the operation completes.
      /// <br/>The value will be removed after successfully sending the email.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("email")]
      public string Email { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static TranscriptionProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<TranscriptionProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class TranscriptionUpdate
   {

      [System.Text.Json.Serialization.JsonPropertyName("project")]
      public EntityReference Project { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static TranscriptionUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<TranscriptionUpdate>(data, options);

      }

   }

   /// <summary>
   /// List of uploaded blocks.
   /// </summary>
   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class UploadedBlocks
   {

      [System.Text.Json.Serialization.JsonPropertyName("committedBlocks")]
      public System.Collections.Generic.ICollection<ResponseBlock> CommittedBlocks { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("uncommittedBlocks")]
      public System.Collections.Generic.ICollection<ResponseBlock> UncommittedBlocks { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static UploadedBlocks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<UploadedBlocks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHook
   {
      /// <summary>
      /// The registered URL that will be used to send the POST requests for the registered events to.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("webUrl")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public System.Uri WebUrl { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("links")]
      public WebHookLinks Links { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public WebHookProperties Properties { get; set; }

      /// <summary>
      /// The location of this entity.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("self")]
      public System.Uri Self { get; set; }

      /// <summary>
      /// The display name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("events")]
      [System.ComponentModel.DataAnnotations.Required]
      public WebHookEvents Events { get; set; } = new WebHookEvents();

      /// <summary>
      /// The time-stamp when the object was created.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("createdDateTime")]
      public System.DateTimeOffset? CreatedDateTime { get; set; }

      /// <summary>
      /// The time-stamp when the current status was entered.
      /// <br/>The time stamp is encoded as ISO 8601 date and time format
      /// <br/>("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("lastActionDateTime")]
      public System.DateTimeOffset? LastActionDateTime { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("status")]
      [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
      public Status? Status { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHook FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHook>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHookEvents
   {

      [System.Text.Json.Serialization.JsonPropertyName("datasetCreation")]
      public bool? DatasetCreation { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("datasetProcessing")]
      public bool? DatasetProcessing { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("datasetCompletion")]
      public bool? DatasetCompletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("datasetDeletion")]
      public bool? DatasetDeletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("modelCreation")]
      public bool? ModelCreation { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("modelProcessing")]
      public bool? ModelProcessing { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("modelCompletion")]
      public bool? ModelCompletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("modelDeletion")]
      public bool? ModelDeletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("evaluationCreation")]
      public bool? EvaluationCreation { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("evaluationProcessing")]
      public bool? EvaluationProcessing { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("evaluationCompletion")]
      public bool? EvaluationCompletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("evaluationDeletion")]
      public bool? EvaluationDeletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionCreation")]
      public bool? TranscriptionCreation { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionProcessing")]
      public bool? TranscriptionProcessing { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionCompletion")]
      public bool? TranscriptionCompletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("transcriptionDeletion")]
      public bool? TranscriptionDeletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("endpointCreation")]
      public bool? EndpointCreation { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("endpointProcessing")]
      public bool? EndpointProcessing { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("endpointCompletion")]
      public bool? EndpointCompletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("endpointDeletion")]
      public bool? EndpointDeletion { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("ping")]
      public bool? Ping { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("challenge")]
      public bool? Challenge { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHookEvents FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHookEvents>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHookLinks
   {
      /// <summary>
      /// The URL that can be used to trigger the sending of a ping event to the registered URL of a web hook registration. See operation "WebHooks_Ping" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("ping")]
      public System.Uri Ping { get; set; }

      /// <summary>
      /// The URL that can be used sending test events to the registered URL of a web hook registration. See operation "WebHooks_Test" for more details.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("test")]
      public System.Uri Test { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHookLinks FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHookLinks>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHookProperties
   {

      [System.Text.Json.Serialization.JsonPropertyName("error")]
      public EntityError Error { get; set; }

      /// <summary>
      /// The API version the web hook was created in. This defines the shape of the payload in the callbacks.
      /// <br/>If the payload type is not supported anymore, because the shape changed and the API version using it is removed (after deprecation),
      /// <br/>the web hook will be disabled.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("apiVersion")]
      public string ApiVersion { get; set; }

      /// <summary>
      /// A secret that will be used to create a SHA256 hash of the payload with the secret as HMAC key.
      /// <br/>This hash will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("secret")]
      public string Secret { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHookProperties FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHookProperties>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHookPropertiesUpdate
   {
      /// <summary>
      /// A secret that will be used to create a SHA256 hash of the payload with the secret as HMAC key.
      /// <br/>This hash will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("secret")]
      public string Secret { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHookPropertiesUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHookPropertiesUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class WebHookUpdate
   {
      /// <summary>
      /// The registered URL that will be used to send the POST requests for the registered events to.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("webUrl")]
      public System.Uri WebUrl { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("properties")]
      public WebHookPropertiesUpdate Properties { get; set; }

      [System.Text.Json.Serialization.JsonPropertyName("events")]
      public WebHookEvents Events { get; set; }

      /// <summary>
      /// The name of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("displayName")]
      public string DisplayName { get; set; }

      /// <summary>
      /// The description of the object.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("description")]
      public string Description { get; set; }

      /// <summary>
      /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
      /// <br/>allowed value length is 256 characters and the count of allowed entries is 10.
      /// </summary>

      [System.Text.Json.Serialization.JsonPropertyName("customProperties")]
      public System.Collections.Generic.IDictionary<string, string> CustomProperties { get; set; }

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static WebHookUpdate FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<WebHookUpdate>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class CommitBlocksEntryArray : System.Collections.ObjectModel.Collection<CommitBlocksEntry>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static CommitBlocksEntryArray FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<CommitBlocksEntryArray>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EndpointsLocalesGet200ApplicationJsonResponse : System.Collections.ObjectModel.Collection<string>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EndpointsLocalesGet200ApplicationJsonResponse FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EndpointsLocalesGet200ApplicationJsonResponse>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class EvaluationsLocalesGet200ApplicationJsonResponse : System.Collections.ObjectModel.Collection<string>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static EvaluationsLocalesGet200ApplicationJsonResponse FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<EvaluationsLocalesGet200ApplicationJsonResponse>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ModelsLocalesGet200ApplicationJsonResponse : System.Collections.ObjectModel.Collection<string>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ModelsLocalesGet200ApplicationJsonResponse FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ModelsLocalesGet200ApplicationJsonResponse>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class ProjectsLocalesGet200ApplicationJsonResponse : System.Collections.ObjectModel.Collection<string>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static ProjectsLocalesGet200ApplicationJsonResponse FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<ProjectsLocalesGet200ApplicationJsonResponse>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class TranscriptionsLocalesGet200ApplicationJsonResponse : System.Collections.ObjectModel.Collection<string>
   {

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static TranscriptionsLocalesGet200ApplicationJsonResponse FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<TranscriptionsLocalesGet200ApplicationJsonResponse>(data, options);

      }

   }

   [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
   public partial class Anonymous
   {

      private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

      [System.Text.Json.Serialization.JsonExtensionData]
      public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
      {
         get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
         set { _additionalProperties = value; }
      }

      public string ToJson()
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Serialize(this, options);

      }
      public static Anonymous FromJson(string data)
      {

         var options = new System.Text.Json.JsonSerializerOptions();

         return System.Text.Json.JsonSerializer.Deserialize<Anonymous>(data, options);

      }

   }



}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625